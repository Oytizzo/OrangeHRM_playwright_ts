import { Page, test, expect } from '@playwright/test';
import extract from 'extract-zip';
import path from 'path';
import fs from 'fs';
import csv from 'csv-parser';
import pdf from 'pdf-parse';
import {FileUtils} from '../libs/fileUtils';

async function login(page: Page) {
  await page.goto('https://sbx-ereviewmanager.wcgclinical.com');
  await page.locator('//input[@autocomplete="username"]').fill('NextGenTestUser1+test@wcgclinical.com');
  await page.click('//*[@value="Next"]');
  await page.locator('//*[@name="credentials.passcode"]').fill('DogDogDog1234!');
  await page.click('//*[@value="Verify"]');
  await page.waitForTimeout(20000);
  await expect(page.locator('//*[@data-testid="welcome-title"]')).toHaveText('Welcome AutomationExt1');
}

async function triggerExport(page: Page, type: 'PDF' | 'CSV') {
  await page.getByRole('button', { name: 'Export All' }).click();
  await page.getByRole('menuitem', { name: `Export as ${type}` }).click();
  await page.getByRole('button', { name: 'Go to Downloads and Exports' }).click();
}

test('Download pdf and validate', async ({ page }) => {
  const downloadsDir = path.resolve('downloads');

  try {
    // Ensure downloads folder exists
    if (!fs.existsSync(downloadsDir)) {
      fs.mkdirSync(downloadsDir, { recursive: true });
    }

    await login(page);
    await triggerExport(page, 'PDF');

    const firstRow = page.locator('table tbody tr').first();
    const downloadButton = firstRow.locator('xpath=.//button[@title="download"]');

    const [download] = await Promise.all([
      page.waitForEvent('download'),
      downloadButton.click()
    ]);

    const suggestedFileName = download.suggestedFilename();
    const savedZipPath = path.join(downloadsDir, suggestedFileName);
    await download.saveAs(savedZipPath);
    console.log('Downloaded ZIP:', suggestedFileName);

    await extract(savedZipPath, { dir: downloadsDir });
    console.log('ZIP extracted successfully to:', downloadsDir);

    const extractedFiles = fs.readdirSync(downloadsDir);
    console.log('Extracted Files:');
    extractedFiles.forEach(file => {
      if (file !== suggestedFileName) {
        console.log(' -', file);
      }
    });

    // ✅ Find the first .pdf file
    const pdfFile = extractedFiles.find(file => file.endsWith('.pdf'));
    if (pdfFile) {
      const pdfPath = path.join(downloadsDir, pdfFile);
      const dataBuffer = fs.readFileSync(pdfPath);

      const pdfData = await pdf(dataBuffer);
      console.log('✅ PDF Text Content:');
      console.log(pdfData.text);

      expect(pdfData.text).toContain('Created From WCG eReview Manager');
      expect(pdfData.text).toContain('Generated By: AutomationExt1 ExtUser1 (nextgentestuser1+test@wcgclinical.com)');
    } else {
      console.error('No PDF file found in the extracted files.');
    }

  } catch (err) {
    console.error('Test failed with error:', err);
  } finally {
    if (fs.existsSync(downloadsDir)) {
      fs.readdirSync(downloadsDir).forEach(file => {
        fs.unlinkSync(path.join(downloadsDir, file));
      });
      console.log('Cleaned up downloads folder');
    }
  }
});

test('Download CSV and validate', async ({ page }) => {
  const downloadsDir = path.resolve('downloads');

  try {
    // Ensure downloads folder exists
    if (!fs.existsSync(downloadsDir)) {
      fs.mkdirSync(downloadsDir, { recursive: true });
    }

    await login(page);
    await triggerExport(page, 'CSV');

    // Locate first row's download button
    const firstRow = page.locator('table tbody tr').first();
    const downloadButton = firstRow.locator('xpath=.//button[@title="download"]');

    // Wait for download
    const [download] = await Promise.all([
      page.waitForEvent('download'),
      downloadButton.click()
    ]);

    // Save ZIP to downloads folder
    const suggestedFileName = download.suggestedFilename();
    const savedZipPath = path.join(downloadsDir, suggestedFileName);
    await download.saveAs(savedZipPath);
    console.log('Downloaded ZIP:', suggestedFileName);

    // Extract ZIP in same folder
    await extract(savedZipPath, { dir: downloadsDir });
    console.log('ZIP extracted successfully to:', downloadsDir);

    // Find and print all extracted files
    const extractedFiles = fs.readdirSync(downloadsDir);
    console.log('Extracted Files:');
    extractedFiles.forEach(file => {
      if (file !== suggestedFileName) {
        console.log(' -', file);
      }
    });

    // Find the first .csv file
    const csvFile = extractedFiles.find(file => file.endsWith('.csv'));
    if (csvFile) {
      const csvPath = path.join(downloadsDir, csvFile);
      const results: any[] = [];

      await new Promise<void>((resolve, reject) => {
        fs.createReadStream(csvPath)
          .pipe(csv())
          .on('data', (data) => results.push(data))
          .on('end', () => {
            console.log('Parsed CSV Records:');
            console.table(results);
            resolve();
          })
          .on('error', reject);
      });
    } else {
      console.error('No CSV file found in the extracted files.');
    }

  } catch (err) {
    console.error('Test failed with error:', err);
  } finally {
    // ✅ Cleanup: delete all files from the downloads directory
    if (fs.existsSync(downloadsDir)) {
      fs.readdirSync(downloadsDir).forEach(file => {
        fs.unlinkSync(path.join(downloadsDir, file));
      });
      console.log('Cleaned up downloads folder');
    }
  }
});
